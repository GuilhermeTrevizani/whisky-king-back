// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhiskyKing.Infra.Data;

#nullable disable

namespace WhiskyKing.Infra.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WhiskyKing.Domain.Entities.AccessGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("AccessGroups", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.AccessGroupPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessGroupId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RegisterUserId");

                    b.HasIndex("AccessGroupId", "Permission")
                        .IsUnique();

                    b.ToTable("AccessGroupsPermissions", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte>("EntityState")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NewValuesJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldValuesJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("Audits", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.CategoryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RegisterUserId");

                    b.HasIndex("CategoryId", "Detail")
                        .IsUnique();

                    b.ToTable("CategoriesDetails", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Merchandise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("Merchandises", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.SaleMerchandise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Detail")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("MerchandiseId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("RegisterUserId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesMerchandises", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.SalePaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RegisterUserId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesPaymentMethods", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("Shifts", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastChangeUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangeUserId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.UserAccessGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessGroupId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisterUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("RegisterUserId");

                    b.HasIndex("UserId", "AccessGroupId")
                        .IsUnique();

                    b.ToTable("UsersAccessGroups", (string)null);
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.AccessGroup", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.AccessGroupPermission", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.AccessGroup", "AccessGroup")
                        .WithMany("AccessGroupsPermissions")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessGroup");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Audit", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Category", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.CategoryDetail", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.Category", "Category")
                        .WithMany("Details")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Merchandise", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.Category", "Category")
                        .WithMany("Merchandises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Sale", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.SaleMerchandise", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.Merchandise", "Merchandise")
                        .WithMany()
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.Sale", "Sale")
                        .WithMany("SalesMerchandises")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Merchandise");

                    b.Navigation("RegisterUser");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.SalePaymentMethod", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.Sale", "Sale")
                        .WithMany("SalesPaymentMethods")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("RegisterUser");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Shift", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId");

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.User", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.User", "LastChangeUser")
                        .WithMany()
                        .HasForeignKey("LastChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastChangeUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.UserAccessGroup", b =>
                {
                    b.HasOne("WhiskyKing.Domain.Entities.AccessGroup", "AccessGroup")
                        .WithMany("UsersAccessGroups")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "RegisterUser")
                        .WithMany()
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhiskyKing.Domain.Entities.User", "User")
                        .WithMany("UsersAccessGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessGroup");

                    b.Navigation("RegisterUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.AccessGroup", b =>
                {
                    b.Navigation("AccessGroupsPermissions");

                    b.Navigation("UsersAccessGroups");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Category", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Merchandises");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SalesMerchandises");

                    b.Navigation("SalesPaymentMethods");
                });

            modelBuilder.Entity("WhiskyKing.Domain.Entities.User", b =>
                {
                    b.Navigation("UsersAccessGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
